---
openapi: 3.1.0
info:
  title: Bank API
  version: v1
servers:
  - url: http://localhost:8080
    description: Generated server url
security:
  - BearerToken: []
tags:
  - name: Card Admin API
    description: Управление картами  для администраторов
  - name: User Management API
    description: Операции управления пользователями (только для ADMIN)
  - name: Card User API
    description: Операции пользователя с картами
paths:
  "/api/users/{id}":
    get:
      tags:
        - User Management API
      summary: Получение пользователя по ID
      operationId: getById
      parameters:
        - name: id
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Найденный пользователь
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserResponse"
        '404':
          description: Пользователь не найден
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserResponse"
    put:
      tags:
        - User Management API
      summary: Обновление данных пользователя
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserUpdateRequest"
        required: true
      responses:
        '200':
          description: Пользователь обновлён
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserResponse"
        '404':
          description: Пользователь не найден
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserResponse"
    delete:
      tags:
        - User Management API
      summary: Удаление пользователя по ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Пользователь удалён
        '404':
          description: Пользователь не найден
  "/api/cards/admin/{id}/status":
    put:
      tags:
        - Card Admin API
      summary: Изменение статуса карты
      operationId: updateStatus
      parameters:
        - name: id
          in: path
          description: ID карты
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ChangeStatusRequest"
        required: true
      responses:
        '200':
          description: Статус успешно обновлён
        '404':
          description: Карта не найдена
  "/auth/registration":
    post:
      tags:
        - auth-controller
      summary: Регистрация нового пользователя
      description: Создает нового пользователя и возвращает публичную информацию о
        нем
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RegisterRequest"
        required: true
      responses:
        '200':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserPublicResponse"
        '400':
          description: Неверный формат запроса
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserPublicResponse"
  "/auth/login":
    post:
      tags:
        - auth-controller
      summary: Аутентификация пользователя
      description: Выполняет вход по логину и паролю, возвращает токен и информацию
        о пользователе
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LoginRequest"
        required: true
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthResponse"
        '401':
          description: Неверные учетные данные
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/AuthResponse"
  "/api/users":
    get:
      tags:
        - User Management API
      summary: Получение списка всех пользователей
      operationId: getAll
      responses:
        '200':
          description: Список пользователей
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserResponse"
    post:
      tags:
        - User Management API
      summary: Создание нового пользователя
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserCreateRequest"
        required: true
      responses:
        '201':
          description: Пользователь создан
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserResponse"
        '400':
          description: Ошибка валидации запроса
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserResponse"
  "/api/cards/user/{id}/block-request":
    post:
      tags:
        - Card User API
      summary: Отправка запроса на блокировку карты
      operationId: requestBlock
      parameters:
        - name: id
          in: path
          description: ID карты
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Запрос успешно отправлен
        '403':
          description: Доступ запрещён
        '404':
          description: Карта не найдена
  "/api/cards/user/transfer":
    post:
      tags:
        - Card User API
      summary: Перевод средств между картами
      operationId: transfer
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TransferRequest"
        required: true
      responses:
        '200':
          description: Перевод выполнен
        '400':
          description: Неверные данные
        '403':
          description: Доступ запрещён
  "/api/cards/admin":
    get:
      tags:
        - Card Admin API
      summary: Получение всех заявок на блокировку
      operationId: getAllPending
      responses:
        '200':
          description: Список заявок
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/BlockResponse"
    post:
      tags:
        - Card Admin API
      summary: Создание новой карты
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateCardRequest"
        required: true
      responses:
        '200':
          description: Карта успешно создана
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CardResponse"
  "/api/cards/admin/{id}/process":
    post:
      tags:
        - Card Admin API
      summary: Обработка запроса на блокировку карты
      operationId: processBlockRequest
      parameters:
        - name: id
          in: path
          description: ID заявки
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Заявка обработана
        '404':
          description: Заявка не найдена
        '500':
          description: Ошибка обработки заявки
  "/api/cards/user":
    get:
      tags:
        - Card User API
      summary: Получение списка своих карт
      operationId: getMyCards
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
        - name: pageable
          in: query
          required: true
          schema:
            "$ref": "#/components/schemas/Pageable"
      responses:
        '200':
          description: Список карт пользователя
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CardResponse"
  "/api/cards/user/{id}":
    get:
      tags:
        - Card User API
      summary: Получение информации о карте по ID
      operationId: getCardById
      parameters:
        - name: id
          in: path
          description: ID карты
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Информация о карте
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CardResponse"
        '403':
          description: Доступ запрещён
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CardResponse"
        '404':
          description: Карта не найдена
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CardResponse"
  "/api/cards/user/{id}/balance":
    get:
      tags:
        - Card User API
      summary: Получение баланса по карте
      operationId: getBalance
      parameters:
        - name: id
          in: path
          description: ID карты
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Баланс карты
          content:
            "*/*":
              schema:
                type: number
        '403':
          description: Доступ запрещён
          content:
            "*/*":
              schema:
                type: number
        '404':
          description: Карта не найдена
          content:
            "*/*":
              schema:
                type: number
  "/api/cards/user/transfer/all":
    get:
      tags:
        - Card User API
      summary: История переводов пользователя
      operationId: getAllTransfer
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            "$ref": "#/components/schemas/Pageable"
      responses:
        '200':
          description: Список переводов
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TransferHistoryResponse"
  "/api/cards/admin/{id}/transfer":
    get:
      tags:
        - Card Admin API
      summary: Получение истории переводов по ID пользователя
      operationId: getTransferByUserId
      parameters:
        - name: id
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Список переводов
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TransferHistoryResponse"
  "/api/cards/admin/transfer":
    get:
      tags:
        - Card Admin API
      summary: Получение всей истории переводов
      operationId: getAllTransfer_1
      responses:
        '200':
          description: Список переводов
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/TransferHistoryResponse"
  "/api/cards/admin/all":
    get:
      tags:
        - Card Admin API
      summary: Получение всех карт (постранично)
      operationId: getAllCards
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            "$ref": "#/components/schemas/Pageable"
      responses:
        '200':
          description: Список карт
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CardResponse"
  "/api/cards/admin/{id}":
    delete:
      tags:
        - Card Admin API
      summary: Удаление карты
      operationId: deleteCard
      parameters:
        - name: id
          in: path
          description: ID карты
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Карта успешно удалена
        '404':
          description: Карта не найдена
components:
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fullName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        role:
          type: string
          enum:
            - ROLE_ADMIN
            - ROLE_USER
        createdAt:
          type: string
          format: date-time
    UserUpdateRequest:
      type: object
      properties:
        fullName:
          type: string
        phoneNumber:
          type: string
        password:
          type: string
    ChangeStatusRequest:
      type: object
      properties:
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
      required:
        - status
    UserPublicResponse:
      type: object
      properties:
        fullName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
    RegisterRequest:
      type: object
      properties:
        fullName:
          type: string
          maxLength: 100
          minLength: 2
        email:
          type: string
          minLength: 1
        phoneNumber:
          type: string
          pattern: "\\+?\\d{7,20}"
        password:
          type: string
          maxLength: 100
          minLength: 8
      required:
        - email
        - fullName
        - password
    AuthResponse:
      type: object
      properties:
        token:
          type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
      required:
        - email
        - password
    UserCreateRequest:
      type: object
      properties:
        fullName:
          type: string
          minLength: 1
        email:
          type: string
        phoneNumber:
          type: string
        password:
          type: string
          minLength: 1
        role:
          type: string
          enum:
            - ROLE_ADMIN
            - ROLE_USER
      required:
        - fullName
        - password
        - role
    TransferRequest:
      type: object
      properties:
        fromCardId:
          type: integer
          format: int64
        toCardId:
          type: integer
          format: int64
        amount:
          type: number
          minimum: 0.01
      required:
        - amount
        - fromCardId
        - toCardId
    CreateCardRequest:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        balance:
          type: number
        expirationDate:
          type: string
          format: date
      required:
        - expirationDate
        - userId
    CardResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        expirationDate:
          type: string
          format: date
        status:
          type: string
        balance:
          type: number
        card_number:
          type: string
        owner:
          type: string
    Pageable:
      type: object
      properties:
        page:
          type: integer
          format: int32
          minimum: 0
        size:
          type: integer
          format: int32
          minimum: 1
        sort:
          type: array
          items:
            type: string
    TransferHistoryResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        senderCardId:
          type: integer
          format: int64
        receiverCardId:
          type: integer
          format: int64
        amount:
          type: number
        transferredAt:
          type: string
          format: date-time
    BlockResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        cardId:
          type: integer
          format: int64
        requestedAt:
          type: string
          format: date-time
  securitySchemes:
    BearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
